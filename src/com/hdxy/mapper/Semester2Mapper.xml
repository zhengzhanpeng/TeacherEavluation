<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://www.mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<mapper namespace="com.hdxy.mapper.Semester2Mapper" >
	<!-- 用于查询Semester2中的对应学期所有表用到的模型 -->
	<resultMap type="Semester2" id="semester2List"/>
	<resultMap type="EndScoreInput" id="endScoreInputList"/>
	<resultMap type="ScoreInputShow" id="scoreInputShowList"/>
	<select id="checkSemester2" resultType="Integer">
		SELECT id FROM semester2 WHERE jobNumber = #{jobNumber, jdbcType=VARCHAR} AND year = #{year, jdbcType=INTEGER};
	</select>
	<insert id="addSemester2" parameterType="Semester2">
		INSERT INTO semester2 (id, jobNumber, name, position, collegeId, superviseScore, peerScore, teachScore, studentScore, date, year) 
		SELECT null, #{jobNumber}, name, position, #{collegeId}, #{superviseScore}, #{peerScore}, #{teachScore}, 0, #{date}, #{year} 
		FROM teacher_data WHERE jobNumber = #{jobNumber};
	</insert>
	<update id="updateSemester2" parameterType="Semester2">
		UPDATE semester2 SET superviseScore = #{superviseScore}, peerScore = #{peerScore}, teachScore = #{teachScore}, date = #{date} WHERE jobNumber = #{jobNumber};
	</update>
	<delete id="deleteSemester2">
		DELETE FROM semester2 WHERE jobNumber = #{jobNumber, jdbcType=VARCHAR} AND year = #{year, jdbcType=INTEGER};
	</delete>
	<select id="getSemester2s" parameterType="Integer" resultMap="semester2List">
		SELECT jobNumber, name, position, superviseScore, peerScore, teachScore, studentScore, endScore FROM semester2 WHERE collegeId = #{collegeId} AND year = (SELECT value FROM some_message WHERE name = 'year');
	</select>
	<select id="getSemester2sToIndex" resultMap="semester2List">
		SELECT jobNumber, name, position, superviseScore, peerScore, teachScore, studentScore, endScore FROM semester2 
		WHERE collegeId = #{collegeId, jdbcType=INTEGER} AND year = (SELECT value FROM some_message WHERE name = 'year')
		ORDER BY endScore DESC LIMIT #{number, jdbcType=INTEGER};
	</select>
	<update id="setStudentScore" parameterType="ScoreInput">
		UPDATE semester2 SET studentScore = #{studentScore} WHERE jobNumber = #{jobNumber} AND year = #{year};
	</update>
	<insert id="addStudentScore" parameterType="ScoreInput">
		INSERT INTO semester2 (id, jobNumber, name, position, superviseScore, peerScore, teachScore, studentScore, year)
		SELECT null, #{jobNumber}, name, position, 0, 0, 0, #{studentScore} , #{year}
		FROM teacher_data WHERE jobNumber = #{jobNumber};
	</insert>
	<select id="getScoreInputShow" resultMap="scoreInputShowList">
		SELECT s.name, s.position, s.jobNumber, s.studentScore, c.collegeName, c.phone 
		FROM semester2 AS s INNER JOIN college AS c ON s.collegeId = c.id
		WHERE s.year = (SELECT value FROM some_message WHERE name = 'year');
	</select>
	<update id="computeEndScore">
		UPDATE semester2 SET endScore = superviseScore * #{superviseScore, jdbcType=DOUBLE} + 
		peerScore * #{peerScore, jdbcType=DOUBLE} + studentScore * #{studentScore, jdbcType=DOUBLE}
		WHERE year = #{year, jdbcType=INTEGER} AND endScore is null;
	</update>
	<select id="getAvgEndScore" parameterType="Integer" resultType="Integer">
		SELECT AVG(endScore) FROM semester2 WHERE (superviseScore != 0 OR peerScore != 0) 
		AND year = #{year, jdbcType=INTEGER};
	</select>
	<select id="getEndScoreInput" parameterType="Integer" resultMap="endScoreInputList">
		SELECT s1.jobNumber AS jobNumber, s1.name AS name, 2 AS semester
		FROM semester1 AS s1 LEFT OUTER JOIN semester2 AS s2 ON s2.jobNumber = s1.jobNumber
		WHERE s1.collegeId = #{collegeId} AND s2.jobNumber is null
		UNION
		SELECT s1.jobNumber AS jobNumber, s1.name AS name, 1 AS semester
		FROM semester2 AS s1 LEFT OUTER JOIN semester1 AS s2 ON s2.jobNumber = s1.jobNumber
		WHERE s1.collegeId = #{collegeId} AND s2.jobNumber IS NULL ;
	</select>
	<select id="getEndScoreCollege" resultType="String">
		SELECT collegeName
		FROM semester1 AS s1 LEFT OUTER JOIN semester2 AS s2 ON s2.jobNumber = s1.jobNumber
		INNER JOIN college AS c ON s1.collegeId = c.id
		WHERE s2.jobNumber is null
		UNION
		SELECT collegeName
		FROM semester2 AS s1 LEFT OUTER JOIN semester1 AS s2 ON s2.jobNumber = s1.jobNumber
		INNER JOIN college AS c ON s1.collegeId = c.id
		WHERE s2.jobNumber IS NULL ;
	</select>
	<insert id="addSemester2Set" parameterType="Semester2">
		INSERT INTO semester2(id
		<if test="jobNumber != null">
			, jobNumber
		</if>
		<if test="name != null">
			, name
		</if>
		<if test="position != null">
			, position
		</if>
		<if test="collegeId != null">
			, collegeId
		</if>
		<if test="superviseScore != null">
			, superviseScore
		</if>
		<if test="peerScore != null">
			, peerScore
		</if>
		<if test="studentScore != null">
			, studentScore
		</if>
		<if test="teachScore != null">
			, teachScore
		</if>
		<if test="endScore != null">
			, endScore
		</if>
		<if test="date != null">
			, date
		</if>
		<if test="year != null">
			, year
		</if>
		) values(null 
		<if test="jobNumber != null">
			, #{jobNumber}
		</if>
		<if test="name != null">
			, #{name}
		</if>
		<if test="position != null">
			, #{position}
		</if>
		<if test="collegeId != null">
			, #{collegeId}
		</if>
		<if test="superviseScore != null">
			, #{superviseScore}
		</if>
		<if test="peerScore != null">
			, #{peerScore}
		</if>
		<if test="studentScore != null">
			, #{studentScore}
		</if>
		<if test="teachScore != null">
			, #{teachScore}
		</if>
		<if test="endScore != null">
			, #{endScore}
		</if>
		<if test="date != null">
			, #{date}
		</if>
		<if test="year != null">
			, #{year}
		</if>
		);
	</insert>
</mapper>